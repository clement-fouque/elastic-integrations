interval: {{interval}}
{{#if enable_request_tracer}}
resource.tracer.filename: "../../logs/cel/http-request-trace-*.ndjson"
resource.tracer.maxbackups: 5
resource.tracer.maxsize: 5
{{/if}}
{{#if proxy_url}}
resource.proxy_url: {{proxy_url}}
{{/if}}
{{#if ssl}}
resource.ssl: {{ssl}}
{{/if}}
{{#if http_client_timeout}}
resource.timeout: {{http_client_timeout}}
{{/if}}
resource.url: {{url}}
state:
  batch_size: {{batch_size}}
  advisory_type: {{advisory_type}}
  access_token: {{access_token}}
redact:
  fields:
    - access_token
regexp:
  github_link_next: '<([^>]+)>; rel="next"'
program: |-
  request(
      "GET",
      (has(state.cursor) && has(state.cursor.next_url) && state.cursor.next_url != null) ?
          state.cursor.next_url
      :
          state.url + "?" + {
              "per_page": [string(state.batch_size)],
              "type": [string(state.advisory_type)],
              "sort": ["published"],
              "order": ["desc"]
          }.format_query()
  ).with(
      {
          "Header": {
              "Accept": ["application/vnd.github+json"],
              "X-GitHub-Api-Version": ["2022-11-28"],
              "Authorization": ["Bearer " + state.access_token],
          },
      }
  ).do_request().as(resp, (resp.StatusCode != 200) ?
      {
              "events": {
                      "error": {
                              "code": string(resp.StatusCode),
                              "id": string(resp.Status),
                              "message": "GET:" + 
                              (
                                      (size(resp.Body) != 0) ?
                                              string(resp.Body)
                                      :
                                              string(resp.Status) + " (" + string(resp.StatusCode) + ")"
                              ),
                      },
              },
              "want_more": false,
      }
  :
      bytes(resp.Body).decode_json().as(body,
          {
              "events": body.map(
                  e,
                  {
                          "message": e.encode_json(),
                  }
              ),
              "url": state.url,
              "want_more": resp.Header.Link[0].re_match('github_link_next'),
              "batch_size": state.batch_size,
              "access_token": state.access_token,
              "cursor": {
                  "next_url": resp.Header.Link[0].re_find('github_link_next').trim_prefix('<').split('>')[0],
              },
          }
      )
  )
tags:
{{#if preserve_original_event}}
  - preserve_original_event
{{/if}}
{{#if preserve_duplicate_custom_fields}}
  - preserve_duplicate_custom_fields
{{/if}}
{{#each tags as |tag|}}
  - {{tag}}
{{/each}}
{{#contains "forwarded" tags}}
publisher_pipeline.disable_host: true
{{/contains}}
{{#if processors}}
processors:
{{processors}}
{{/if}}