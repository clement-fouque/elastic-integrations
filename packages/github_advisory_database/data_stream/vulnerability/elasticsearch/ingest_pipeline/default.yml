---
description: Pipeline for processing GitHub Advisory Database.
processors:
  - set:
      field: ecs.version
      tag: set_ecs_version
      value: 8.11.0
  - fail:
      tag: cel_failure
      if: ctx.error?.message != null && ctx.message == null && ctx.event?.original == null
      message: error message set and no data to process
  - set:
      field: event.kind
      tag: set_event_kind_1
      value: enrichment
  - append:
      field: event.category
      tag: append_event_catgeory
      value: vulnerability
      allow_duplicates: false
  - append:
      field: event.type
      tag: append_event_type
      value: info
      allow_duplicates: false
  - json:
      field: message
      tag: json_message
      target_field: github_advisory_database.vulnerability
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - set:
      field: vulnerability.classification
      tag: set_vulnerability_classification
      value: CVSS
      ignore_empty_value: true
  - set:
      field: vulnerability.description
      tag: set_vulnerability_description
      copy_from: github_advisory_database.vulnerability.description
      ignore_empty_value: true
  - set:
      field: vulnerability.enumeration
      tag: set_vulnerability_enumeration
      value: CVE
      ignore_empty_value: true
  - set:
      field: vulnerability.id
      tag: set_vulnerability_id
      copy_from: github_advisory_database.vulnerability.cve_id
      ignore_empty_value: true
  - set:
      field: vulnerability.reference
      tag: set_vulnerability_reference
      copy_from: github_advisory_database.vulnerability.html_url
      ignore_empty_value: true
  - set:
      field: vulnerability.score.base
      tag: set_vulnerability_score_base
      copy_from: github_advisory_database.vulnerability.cvss.score
      ignore_empty_value: true
  - set:
      field: vulnerability.score.version
      tag: set_vulnerability_score_version
      copy_from: github_advisory_database.vulnerability.cvss.score
      ignore_empty_value: true
  - script:
      lang: painless
      tag: script_to_assign_vulnerability_score_version
      if: ctx.github_advisory_database?.vulnerability?.cvss?.vector_string != null
      source: |-
        def cvss_version;
        def pattern = /CVSS:([234]\.\d)/;
        
        def matcher = pattern.matcher(ctx.github_advisory_database.vulnerability.cvss.vector_string);
        if (matcher.find()) {
            cvss_version = matcher.group(1);
            field("vulnerability.score.version").set(cvss_version);
        }

      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  
  - set:
      field: vulnerability.severity
      tag: set_vulnerability_severity
      copy_from: github_advisory_database.vulnerability.severity
      ignore_empty_value: true
  - remove:
      tag: remove_json
      field:
        - json
        - message
      ignore_missing: true
on_failure:
  - append:
      field: error.message
      value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - set:
      field: event.kind
      value: pipeline_error
